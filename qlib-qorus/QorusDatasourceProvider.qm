# -*- mode: qore; indent-tabs-mode: nil -*-
# @file QorusDatasourceProvider.qm Qorus Datasource provider for Qorus datasources

/*  QorusDatasourceProvider.qm Copyright 2016 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum Qore version
%requires qore >= 1.0

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires QorusClientCore

module QorusDatasourceProvider {
    version = "1.1";
    desc    = "API for providing Qorus Datasource connection strings from datasource identifiers";
    author  = "David Nichols <david.nichols@qoretechnologies.com>";
    url     = "https://qoretechnologies.com";
    license = "MIT";
    init    = \QorusClient::init2();
}

/** @page qorusdatasourceprovider_module QorusDatasourceProvider Module

    @tableofcontents

    @section qorusdatasourceproviderintro QorusDatasourceProvider Module Introduction

    The %QorusDatasourceProvider module provides an API for providing @ref Qore::SQL::Datasource "Datasource"
    connection strings from @ref dsconn "Qorus datasource identifiers".

    To use this module, set the \c QORE_DATASOURCE_PROVIDERS environment variable to
    \c "QorusDatasourceProvider".

    All the public symbols in the module are defined in the QorusDatasourceProvider namespace

    Functions:
    - @ref QorusDatasourceProvider::get_mod_ds_string() "get_mod_ds_string()"

    @section qorusdatasourceproviderrelnotes Release Notes

    @subsection qorusdatasourceprovider_1_1 QorusDatasourceProvider v1.1
    - added support for get_mod_ds_hash()

    @subsection qorusdatasourceprovider_1_0 QorusDatasourceProvider v1.0
    - the initial version of the QorusDatasourceProvider module
*/

#! The QorusDatasourceProvider namespace contains all the objects in the QorusDatasourceProvider module
public namespace QorusDatasourceProvider {
    #! Returns a datasource connection string for the given @ref dsconn "datasource identifier"
    /** @par Example:
        @code{.py}
string connstr = get_mod_ds_string(str);
        @endcode

        @param str the @ref dsconn "Qorus datasource identifiers"

        @return the datasource connection string if matched, otherwise an \c INVALID-DATASOURCE exception is thrown

        @throw INVALID-DATASOURCE unknown @ref dsconn "datasource"
     */
    public string sub get_mod_ds_string(string str) {
        return omqclient.getDatasourceConnectionString(str);
    }

    #! Returns a hash of all known datasources; keys are datasource names, values are connection strings
    /** @par Example:
        @code{.py}
*hash<string, string> ds_hash = get_mod_ds_hash();
        @endcode

        @return a hash of all known datasources; keys are datasource names, values are connection strings
     */
    public *hash<string, string> sub get_mod_ds_hash() {
        return omqclient.getDatasourceConnectionsAsHash();
    }
}
