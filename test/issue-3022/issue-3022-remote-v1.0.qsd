# -*- mode: qore; indent-tabs-mode: nil -*-

# service: issue-3022-remote
# serviceversion: 1.0
# servicedesc: issue 3022 test service (remote)
# parse-options: PO_NEW_STYLE, PO_REQUIRE_TYPES, PO_STRICT_ARGS
# serviceauthor: Qore Technologies, s.r.o.
# autostart: false
# remote: true
# ENDSERVICE

# desc: init
# name: init
%requires HttpServerUtil

public class Issue3022RemoteAuthenticator inherits public HttpServer::AbstractAuthenticator {
    bool requiresAuthentication() {
        return True;
    }

    string getRealm() {
        return "issue3022";
    }

    *hash<HttpResponseInfo> authenticateRequest(HttpListenerInterface listener, hash hdr, reference<hash> cx) {
        if (!hdr.hasKey("x-api-key"))
            return cast<hash<HttpResponseInfo>>(RestHandler::makeResponse(401, "unauthorized missingkey"));
        if (hdr."x-api-key" != "abc12345")
            return cast<hash<HttpResponseInfo>>(RestHandler::makeResponse(401, "unauthorized invalidkey"));
        if (hdr."x-api-auth" != "loremipsum")
            return cast<hash<HttpResponseInfo>>(RestHandler::makeResponse(403, "xxforbidden"));

        return NOTHING;
    }
}

class ARemoteRestClass inherits AbstractRestClass {
    constructor() : AbstractRestClass() {}

    string name() {
        return "a";
    }

    hash get(hash cx, *hash ah) {
        return RestHandler::makeResponse(200, "okok");
    }
}

class Issue3022RemoteRestHandler inherits AbstractServiceRestHandler {
    constructor() : AbstractServiceRestHandler("/issue3022", False, new Issue3022RemoteAuthenticator()) {
        addClass(new ARemoteRestClass());
        addListener(30221);
    }

    removeRootPath(reference<string> path) {
        path =~ s/^\/*issue3022//;
    }
}

sub init() {
    Issue3022RemoteRestHandler rh();
    ServiceApi::bindHttp(rh);
}
# END
