#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires QUnit
%requires QorusClientCore

%include OloadTestHelper.qc

%exec-class Main

class Main inherits QUnit::Test {
    private {
        string srcDir = get_script_dir() + Qore::DirSep + "issue-3233" + Qore::DirSep;
        string originalInterfacesDir = srcDir + Qore::DirSep + "original_interfaces";
        string changedInterfacesDir = srcDir + Qore::DirSep + "changed_interfaces";

        const WorkflowName1 = "ISSUE-3233-WORKFLOW";
        const Step1Name = "Issue3233Step1";
        const Step2Name = "Issue3233Step2";
        const BaseStep = "Issue3233BaseStep";
        const InterfacesToDelete = (
            "workflow:" + WorkflowName1 + ":1.0",
            "step:" + Step1Name + ":1.0",
            "step:" + Step2Name + ":1.0",
            "class:" + BaseStep + ":1.0",
        );
    }

    constructor(): Test("QorusBug3233ConfigItems", OMQ::version) {
        QorusClient::init2();
        addTestCase("mainTest", \mainTest());
        set_return_value(main());
    }

    private setValue(auto set_value, string interface_type, string interface_name, string item_name) {
        hash value = {"value": set_value};
        auto rest_response = qrest.put(interface_type + "s/" + interface_name + "/config/" + item_name, value).value;
        assertEq(value.value, rest_response);
    }

    private mainTest() {
        printf("------START oload original interfaces------\n");
        hash result = OloadTestHelper::oloadFiles(originalInterfacesDir, True);
        assertEq(0, result.exit_code);
        printf("-------END oload original interfaces-------\n");

        printf("------START oload changed interfaces-------\n");
        result = OloadTestHelper::oloadFiles(changedInterfacesDir, True);
        assertEq(0, result.exit_code);
        printf("-------END oload changed interfaces--------\n");

        printf("---------START delete interfaces-----------\n");
        result = OloadTestHelper::deleteInterfaces(InterfacesToDelete, True);
        assertEq(0, result.exit_code);
        printf("----------END delete interfaces------------\n");

        printf("------START oload original interfaces------\n");
        result = OloadTestHelper::oloadFiles(originalInterfacesDir, True);
        assertEq(0, result.exit_code);
        printf("-------END oload original interfaces-------\n");
    }
}
