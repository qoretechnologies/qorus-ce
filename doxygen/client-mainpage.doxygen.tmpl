/** @page client Client Library API Reference

    @tableofcontents

    @section clientintro Introduction to the Qorus Client Library

    The Qorus Client Library is designed to facilitate communication with Qorus servers and the manipulation of Qorus
    data without the use of the server.  In addition, services are provided to parse the options and to acquire
    Datasources based on named datasource in the system database as well as other connections and integration objects.

    For the Python-based remote client, allowing users to work with remote Qorus instances over HTTP and WebSocket
    connections, which can be installed on any platform supporting a recent version of Python 3; see
    <a href="https://github.com/qoretechnologies/qorus-remote">https://github.com/qoretechnologies/qorus-remote</a>.

    The %Python client can be installed from \c pip with:
    @verbatim pip install qorus-remote @endverbatim

    Note that this documentation documents the Qorus client library delivered with the Qorus server.  The Qorus client
    library is written in %Qore and requires read access to the server configuration files (@ref options, as well as
    to the @ref network-key "network encryption key file" and the @ref sensitive-data-key "sensitive data key file",
    etc).

    All Qorus client scripts depend on the client library, such as the following:
    - @ref ocmd
    - @ref ostatus
    - @ref ojview
    - @ref oprop
    - @ref ostart
    - @ref ostop
    - @ref oview
    - @ref qevent
    - @ref qrest
    - @ref schema-tool
    - @ref user-tool
    - @ref swagger2service

    @see
    - @ref qorusclientoptionoverview for options affecting the Qorus client
    - @ref OMQ::QorusClient (static methods related to Qorus client functionality)
    - @ref OMQ::QorusClientAPI (the class defining the @ref omqclient "omqclient" object)

    @section client_python Using the Qorus Client from Python

    %Python integration with %Qore is implemented using the @ref python_qoreloader_module "qoreloader module",
    which is the %Python module provided in %Qore's @ref pythonintro "python" module, providing tight integration with
    both languages, including bi-directional dynamic and transparent imports of code and data between %Python and
    %Qore as well as @ref python_qoreloader_import_java "Python and Java" with the assistance of the
    @ref jniintro "jni module".

    The %Python @ref python_qoreloader_module "qoreloader module" is located in <tt>$OMQ_DIR/python</tt>; this
    directory must appear in the \c PYTHONPATH environment variable to be imported by %Python.

    %Python examples in this guide assume that the @ref python_qoreloader_module "qoreloader module" is available from
    the \c PYTHONPATH environment variable.

    @par PYTHONPATH Unix / Linux Example
    @verbatim
export PYTHONPATH=$OMQ_DIR/python/qoreloader.so
    @endverbatim

    The @ref python_qoreloader_module "qoreloader module" will initialize the %Qore library when imported and will
    generate %Python classes dynamically from %Qore and Java classes with supported \c import statements;
    additionally, the @ref python_qoreloader_module "qoreloader module" will convert data automatically to and from
    %Qore and Java at runtime when %Python code calls %Qore or Java code and vice-versa.

    @par %Python Example:
    @code{.py}
import qoreloader
import qore.QorusClientBase
from qore.__root__.OMQ.UserApi import UserApi

# NOTE: this make a REST call to retrieve the session ID; Qorus must be running
print('Qorus session ID: {}'.format(UserApi.getSessionId()))
    @endcode

    @see
    - @ref installtarenvvars for more information on environment variables used by Qorus
    - @ref python_qore_import
    - @ref python_java_import

    @section client_java Using the Qorus Client from Java

    Java integration with %Qore is implemented through the \c qore-jni.jar JAR file, which provides a Java compiler
    based on the standard \c javax.tools package in the \c java.compiler module, as well as a a class loader, both
    supporting dynamic bytecode generation of wrapper classes for %Qore and %Python declarations and symbols on demand
    during complation and at runtime.

    The \c qore-jni.jar JAR file will automatically initialize %Qore's @ref jniintro "jni" module as well as %Qore's
    @ref pythonintro "python" module as needed to introspect %Qore and %Python definitions, generate Java bytecode
    dynamically, and import the generated bytecode directly into the requesting Java program.

    This allows Java programs to use the full Qorus API set as well as dynamically import %Python APIs and modules
    into Java and use them as if they were Java APIs.

    Qorus provides \c qjavac as a front end to the %Qore Java compiler for convenience; \c qjavac takes the same
    arguments as the standard \c javac compiler.

    To compile Java code using dynamic imports, make sure and include \c $OMQ_DIR/jar/qore-jni.jar in the classpath.

    @par Java Compilation Example
    @verbatim
qjavac -cp ${OMQ_DIR}/jar/qore-jni.jar MyClass.java
    @endverbatim

    To run Java code that uses dynamic imports, you need to use the same classpath as above, plus %Qore's
    @ref org.qore.jni.QoreURLClassLoader "org.qore.jni.QoreURLClassLoader" as the system class loader.

    @par Java Execution Example
    @verbatim
java -cp ${OMQ_DIR}/jar/qore-jni.jar:. -Djava.system.class.loader=org.qore.jni.QoreURLClassLoader MyClass
    @endverbatim

    @see
    - @ref jni_dynamic_import_in_java
    - @ref javadevelopment_testing
    - @ref jni_from_java

    @section client_initialization Initializing the Qorus Client Library

    Use the \c QorusClientBase module to ensure that a minimum set of Qorus client APIs are available to your script
    or program.

    The first step in using the client library is to initialize it with a call to OMQ::QorusClient::initFast()
    (or OMQ::QorusClient::init() or OMQ::QorusClient::init2()):

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# initialize the Qorus client
QorusClient.initFast()
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

class MyClass {
    // static initialization
    static {
        try {
            // we initialize the Qorus client in the class's static initialization block
            QorusClient.initFast();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Throwable {
        // ... code here
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

%exec-class client

class client {
    constructor() {
        QorusClient::initFast();
    }
}
    @endcode

    @section client_datasources Using Datasources

    Database driver modules will be loaded on-demand when @ref Qore::SQL::Datasource "Datasource" or
    @ref Qore::SQL::DatasourcePool "DatasourcePool" objects are acquired; if you want to use other definitions
    provided by the database modules, then load them explicitly with a \c %%requires directive, as follows:

    @code{.py}
%requires oracle
    @endcode

    Use the @ref OMQ::UserApi::UserApi::getDatasourceDedicated() "UserApi::getDatasourceDedicated()" method (or
    @ref OMQ::UserApi::UserApi::getDatasourcePool() "UserApi::getDatasourcePool()") to acquire
    @ref Qore::SQL::Datasource "Datasource" and @ref Qore::SQL::DatasourcePool "DatasourcePool" objects.

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "UserApi" class
from qore.__root__.OMQ.UserApi import UserApi

# import Qore's Datasource and DatasourcePool classes
from qore.__root__.Qore.SQL import Datasource, DatasourcePool

# initialize the Qorus client
QorusClient.initFast()

ds: Datasource = UserApi.getDatasourceDedicated('omquser')
dsp: DatasourcePool = UserApi.getDatasourcePool('omquser')
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qorus's "UserApi" class
import qoremod.QorusClientBase.OMQ.UserApi.UserApi;

// import Qore's Datasource and DatasourcePool classes
import qore.Qore.SQL.Datasource;
import qore.Qore.SQL.DatasourcePool;

class MyClass {
    // static initialization
    static {
        try {
            // we initialize the Qorus client in the class's static initialization block
            QorusClient.initFast();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Throwable {
        // get a Datasource object for the "omquser" datasource
        Datasource ds = UserApi.getDatasourceDedicated("omquser");
        // get a DatasourcePool object for the "omquser" datasource
        DatasourcePool dsp = UserApi.getDatasourcePool("omquser");
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

# initialize the client library
QorusClient::initFast();

# get a Datasource object for the "omquser" datasource
Datasource ds = UserApi::getDatasourceDedicated("omquser");
# get a DatasourcePool object for the "omquser" datasource
DatasourcePool dsp = UserApi::getDatasourcePool("omquser");
    @endcode

    @section client_tables Using SQL Tables

    Use the @ref OMQ::UserApi::UserApi::getSqlTable() "UserApi::getSqlTable()" method to acquire
    @ref SqlUtil::AbstractTable "AbstractTable" objects.

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "UserApi" class
from qore.__root__.OMQ.UserApi import UserApi

# import Qore's SqlUtil module's AbstractTable class
from qore.SqlUtil.SqlUtil import AbstractTable

# initialize the Qorus client
QorusClient.initFast()

# get the "gl_import" table in Qorus's "erp1" datasource
gl_import: AbstractTable = UserApi.getSqlTable('erp1', 'gl_import')
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qorus's "UserApi" class
import qoremod.QorusClientBase.OMQ.UserApi.UserApi;

// import Qore's SqlUtil module's AbstractTable class
import qoremod.SqlUtil.SqlUtil.AbstractTable;

class MyClass {
    // static initialization
    static {
        try {
            // we initialize the Qorus client in the class's static initialization block
            QorusClient.initFast();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Throwable {
        // get the "gl_import" table in Qorus's "erp1" datasource
        AbstractTable erp1 = UserApi.getSqlTable("erp1", "gl_import");
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

# initialize the client library
QorusClient::initFast();

# get the "gl_import" table in Qorus's "erp1" datasource
SqlUtil::AbstractTable gl_import = UserApi::getSqlTable("erp1", "gl_import");
    @endcode

    @section client_data_providers Using Data Providers

    Use the @ref OMQ::UserApi::UserApi::getDataProvider() "UserApi::getDataProvider()" method to acquire
    @ref DataProvider::AbstractDataProvider "AbstractDataProvider" objects.

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "UserApi" class
from qore.__root__.OMQ.UserApi import UserApi

# import Qore's DataProvider module's AbstractDataProvider class
from qore.DataProvider.DataProvider import AbstractDataProvider

# get the "gl_import" table in Qorus's "erp1" datasource
provider: AbstractDataProvider = UserApi.getDataProvider("connection/rest-billing-1/rest-billing-demo/accounts/POST")
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qorus's "UserApi" class
import qoremod.QorusClientBase.OMQ.UserApi.UserApi;

// import Qore's DataProvider module's AbstractDataProvider class
import qoremod.DataProvider.DataProvider.AbstractDataProvider;

class MyClass {
    public static void main(String[] args) throws Throwable {
        // get a REST POST Data Provider
        AbstractDataProvider provider =
            UserApi.getDataProvider("connection/rest-billing-1/rest-billing-demo/accounts/POST");
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

# get a REST POST Data Provider
DataProvider::AbstractDataProvider provider =
    UserApi::getDataProvider("connection/rest-billing-1/rest-billing-demo/accounts/POST");
    @endcode

    @section client_servercommunication Communicating with Qorus Servers

    @subsection client_serverrestcommunication Communicating with Qorus Servers with the REST API

    Communication with the Qorus server using the @ref restapi "REST API" is performed through the global variable
    @ref OMQ::qrest "qrest" (see OMQ::QorusSystemRestHelperBase for the API reference for this object), available in
    %Qore.  In Python and Java, this object should be declared and initialized explicitly as in the following
    examples.

    This object can then be used to make REST or @ref datastreamprotocol "DataStream" calls to the Qorus server's
    @ref restapi "REST API" as in the following example:

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "QorusSystemRestHelper" class
from qore.__root__.OMQ.Client import QorusSystemRestHelper

# initialize the Qorus client
QorusClient.initFast()

# create REST help object
qrest: QorusSystemRestHelper = QorusSystemRestHelper()

# retrieve system information
info: dict = qrest.get("system")
print('Qorus {} {} sessiond {}.format(info['omq-version'], info['instance-key'], info['session-id']))
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qore's Hash class
import org.qore.jni.Hash;

// import Qorus's REST helper class
import qoremod.QorusClientBase.OMQ.Client.QorusSystemRestHelper;

class MyClass {
    // Qorus REST API interface object
    public static QorusSystemRestHelper qrest;

    // static initialization
    static {
        try {
            // we initialize the Qorus client in the class's static initialization block
            QorusClient.initFast();

            // create REST help object
            qrest = new QorusSystemRestHelper();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Throwable {
        Hash info = (Hash)qrest.get("system");
        System.out.printf("Qorus %s %s sessiond %s\n", info.getString("omq-version"), info.getString("instance-key"),
            info.getString("session-id"));
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

%exec-class client

class client {
    constructor() {
        # initialize the client
        QorusClient::initFast();

        # retrieve system information
        hash<auto> info = qrest.get("system");
        printf("Qorus %s %s sessiond %s\n", info."omq-version", info."instance-key", info."session-id");
    }
}
    @endcode

    To get a REST or @ref datastreamprotocol "DataStream" connection to a remote server, the API in the following
    example can be used.

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "QorusSystemRestHelper" class
from qore.__root__.OMQ.Client import QorusSystemRestHelper

# initialize the Qorus client
QorusClient.initFast()

# get a connection to remote Qorus server "nodea"
qrest: QorusSystemRestHelper = QorusSystemRestHelper('nodea')

# retrieve system information
info: dict = qrest.get("system")
print('Qorus {} {} sessiond {}.format(info['omq-version'], info['instance-key'], info['session-id']))
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qore's Hash class
import org.qore.jni.Hash;

// import Qorus's REST helper class
import qoremod.QorusClientBase.OMQ.Client.QorusSystemRestHelper;

class MyClass {
    // Qorus REST API interface object
    public static QorusSystemRestHelper qrest;

    // static initialization
    static {
        try {
            // we initialize the Qorus client in the class's static initialization block
            QorusClient.initFast();

            // get a connection to remote Qorus server "nodea"
            qrest = new QorusSystemRestHelper("nodea");
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Throwable {
        Hash info = (Hash)qrest.get("system");
        System.out.printf("Qorus %s %s sessiond %s\n", info.getString("omq-version"), info.getString("instance-key"),
            info.getString("session-id"));
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
# Qorus client base module
%requires QorusClientBase

# use new style, assume local variables and do not require $ symbols on vars and members, etc
%new-style
# requires all variables to be declared before use (recommended)
%require-our
# requires types to be declared
%require-types
# enable all warnings
%enable-all-warnings

# initialize the client
QorusClient::initFast();

# get a connection to remote Qorus server "nodea"
OMQ::Client::QorusSystemRestHelper rest = UserApi::getRemoteRestConnection("nodea");
printf("Qorus %s %s sessiond %s\n", info."omq-version", info."instance-key", info."session-id");
    @endcode

    @subsection client_serverrpccommunication Calling Service Methods from Qore

    From %Qore, use the @ref OMQ::omqservice "omqservice" variable to easily call service methods.  Internally, this
    object uses the global @ref OMQ::omqapi "omqapi" variable to perform the communication with the server.

    For example (assuming the client library has been initialized as in the previous examples):
    @code{.py}
*hash<auto> rh = omqservice.system.info.searchReleases({"name": "qorus-user-rel1"});
    @endcode

    The above example will return a hash of information about the \c "qorus-user-rel1" release, if it exists/

    @see @ref client_serverrestcommunication to get a REST connection to a remote server.

    Note that the Qorus client programs are delivered in source form and can be used as examples of how to communicate
    with the server; see the source for:
    - @ref qrest
    - @ref ocmd
    - @ref ostatus
    - @ref oview
    - @ref ojview
    - @ref ostart
    - @ref ostop
    - @ref qevent

    The above programs show how to use the client API with command-line processing, error handling, etc.

    @subsection client_unixsocketurls UNIX Socket Support in URLs

    URLs with UNIX sockets are generally supported in %Qore with the following syntax:
    - <tt>scheme://socket=</tt><i>&lt;url_encoded_path&gt;</i><tt>/path</tt>

    <i>&lt;url_encoded_path&gt;</i> is a path with URL-encoding as performed by @ref encode_url(); for example, given
    the following URL:
    - \c "http://socket=%2ftmp%2fqorus-sock-qorus-instance-1/api/latest/system/starttime"

    This URL allows a filesystem path to be used in the host portion of the URL and for the URL to include a URL path
    as well.

    @section client_lib_connection Using User Connections in the Qorus Client Library

    @ref userconn "User connections" are user-defined connections to external sytems or facilities that are delivered
    as a part of Qorus releases.

    Qorus client programs can use the @ref OMQ::UserApi::UserApi::getUserConnection() "UserApi::getUserConnection()"
    method to access connections defined in the Qorus system schema (Note that this method works equally in server and
    client code).

    For example, the following code will retrieve user connection object named \c "my_connection":

    @par %Python Example:
    @code{.py}
# the "qoreloader" module is provided by Qorus and provides the bridge between Python <-> Qore and, with Qore's "jni"
# module, between Python <-> Java
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_module
import qoreloader

# the "qoreloader" module provides the magic package "qore" which allows us to import Qore APIs and use them as if
# they were Python APIs
# ref: https://qoretechnologies.com/manual/qorus/gitlab-docs/develop/python/python/html/index.html#python_qoreloader_import_qore
from qore.QorusClientBase import QorusClient

# import Qorus's "UserApi" class
from qore.__root__.OMQ.UserApi import UserApi

# get the object from the "my_connection" connection
obj = UserApi.getUserConnection("my_connection")
    @endcode

    @par %Java Example:
    @code{.java}
// the magic "qoremod" package will load a Qore module and handles the dynamic bycode generation of wrapper classes
// in Java to enable Qore code to be used as if it were Java code
import qoremod.QorusClientBase.*;

// import Qorus's UserApi class
import qoremod.QorusClientBase.OMQ.UserApi.UserApi;

class MyClass {
    public static void main(String[] args) throws Throwable {
        // get the object from the "my_connection" connection
        Object o = UserApi.getUserConnection("my_connection");
    }
}
    @endcode

    @par %Qore Example
    @code{.py}
%new-style
%require-types
%strict-args

%requires QorusClientBase

# get the object from the "my_connection" connection
object o = UserApi::getUserConnection("my_connection");
    @endcode

    @note The class of the object returned by the
    @ref OMQ::UserApi::UserApi::getUserConnection() "UserApi::getUserConnection()" method depends on the
    @ref userconntypes "connection type".
*/
